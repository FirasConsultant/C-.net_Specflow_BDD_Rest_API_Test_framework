// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs.SS.Pricing.Football
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FootballMarketDefinitions")]
    public partial class FootballMarketDefinitionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FootballMarketDefinitions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FootballMarketDefinitions", "In order to allow clients to create Market Definitions\r\n   As sporting solutions\r" +
                    "\n   I want to be able to get the Market Type Names", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No Extra time, no penalties")]
        public virtual void NoExtraTimeNoPenalties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No Extra time, no penalties", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table1.AddRow(new string[] {
                        "MatchLength",
                        "90"});
            table1.AddRow(new string[] {
                        "EtMatchLength",
                        "0"});
            table1.AddRow(new string[] {
                        "ExtratimeActive",
                        "false"});
            table1.AddRow(new string[] {
                        "PenaltiesActive",
                        "false"});
#line 7
 testRunner.Given("I have created a new Market Definition for \'Football\' with the following base var" +
                    "iables", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Display Name"});
            table2.AddRow(new string[] {
                        "Match Winner"});
            table2.AddRow(new string[] {
                        "Double Chance"});
            table2.AddRow(new string[] {
                        "Winning Margin"});
            table2.AddRow(new string[] {
                        "Score In Both Halves"});
            table2.AddRow(new string[] {
                        "Total Goals Over/Under"});
            table2.AddRow(new string[] {
                        "Total Goals 3-Way"});
            table2.AddRow(new string[] {
                        "Half Goals 3-Way"});
            table2.AddRow(new string[] {
                        "Asian Handicap"});
            table2.AddRow(new string[] {
                        "Handicap"});
            table2.AddRow(new string[] {
                        "Draw No Bet"});
            table2.AddRow(new string[] {
                        "Win To Nil"});
            table2.AddRow(new string[] {
                        "Full Time Correct Score"});
            table2.AddRow(new string[] {
                        "Full Time Correct Score Reduced"});
            table2.AddRow(new string[] {
                        "Goal Team"});
            table2.AddRow(new string[] {
                        "Clean Sheet"});
            table2.AddRow(new string[] {
                        "Both Teams To Score"});
            table2.AddRow(new string[] {
                        "Number Of Teams To Score"});
            table2.AddRow(new string[] {
                        "Team To Score"});
            table2.AddRow(new string[] {
                        "Which Teams To Score"});
            table2.AddRow(new string[] {
                        "Total Goals"});
            table2.AddRow(new string[] {
                        "Total Goals (Reduced)"});
            table2.AddRow(new string[] {
                        "Team Total Goals"});
            table2.AddRow(new string[] {
                        "Team Total Goals (Reduced)"});
            table2.AddRow(new string[] {
                        "Time Of First Goal"});
            table2.AddRow(new string[] {
                        "Time Of First Half Goal"});
            table2.AddRow(new string[] {
                        "Match Goal Time"});
            table2.AddRow(new string[] {
                        "Team Goal Time"});
            table2.AddRow(new string[] {
                        "Match Goal Time Over/Under/NoGoal"});
            table2.AddRow(new string[] {
                        "Team Goal Time Over/Under/NoGoal"});
            table2.AddRow(new string[] {
                        "1st Half Goals"});
            table2.AddRow(new string[] {
                        "Half With Most Goals"});
            table2.AddRow(new string[] {
                        "Double Result"});
            table2.AddRow(new string[] {
                        "Half Time Result"});
            table2.AddRow(new string[] {
                        "Half Time Correct Score"});
            table2.AddRow(new string[] {
                        "Goals Odd/Even"});
            table2.AddRow(new string[] {
                        "Match Goal Half"});
            table2.AddRow(new string[] {
                        "Team Goal Half"});
            table2.AddRow(new string[] {
                        "Corners Bands"});
            table2.AddRow(new string[] {
                        "Corners Over/Under"});
            table2.AddRow(new string[] {
                        "Corners Handicap 2-Way"});
            table2.AddRow(new string[] {
                        "Corners Match Bet"});
            table2.AddRow(new string[] {
                        "Corners Handicap 3-Way"});
            table2.AddRow(new string[] {
                        "Time Of First Corner"});
            table2.AddRow(new string[] {
                        "First Corner Team"});
            table2.AddRow(new string[] {
                        "Half Corners Exact Middle"});
            table2.AddRow(new string[] {
                        "Half Corners"});
            table2.AddRow(new string[] {
                        "First Corner Team By Half"});
            table2.AddRow(new string[] {
                        "Time Of First Team Corner"});
            table2.AddRow(new string[] {
                        "Corner Team"});
            table2.AddRow(new string[] {
                        "Booking Points 3-Way"});
            table2.AddRow(new string[] {
                        "Bookng Points 2-Way"});
            table2.AddRow(new string[] {
                        "Bookings Match Bet"});
            table2.AddRow(new string[] {
                        "First Carded Team"});
            table2.AddRow(new string[] {
                        "Match Red Card"});
            table2.AddRow(new string[] {
                        "Team Red Card"});
            table2.AddRow(new string[] {
                        "Card Team"});
            table2.AddRow(new string[] {
                        "Penalty Awarded"});
            table2.AddRow(new string[] {
                        "Penalty Scored"});
            table2.AddRow(new string[] {
                        "Match GoalScorer"});
            table2.AddRow(new string[] {
                        "Team GoalScorer"});
            table2.AddRow(new string[] {
                        "Last Match GoalScorer"});
            table2.AddRow(new string[] {
                        "Anytime - Yes/No"});
            table2.AddRow(new string[] {
                        "Brace - Yes/No"});
            table2.AddRow(new string[] {
                        "Hat-trick - Yes/No"});
            table2.AddRow(new string[] {
                        "GoalScorer Shirt Over/Under"});
            table2.AddRow(new string[] {
                        "Double Chance"});
            table2.AddRow(new string[] {
                        "Anytime Goalscorer"});
            table2.AddRow(new string[] {
                        "Brace Goalscorer"});
            table2.AddRow(new string[] {
                        "Hat-trick Goalscorer"});
            table2.AddRow(new string[] {
                        "1st Half Goals - Under/Over"});
            table2.AddRow(new string[] {
                        "Win Both Halves"});
            table2.AddRow(new string[] {
                        "Team To Score Last Goal"});
            table2.AddRow(new string[] {
                        "Goal Is Own Goal"});
            table2.AddRow(new string[] {
                        "Last Goal Is Own Goal"});
            table2.AddRow(new string[] {
                        "Any Time Own Goal"});
            table2.AddRow(new string[] {
                        "Match Winner And Both Teams To Score"});
            table2.AddRow(new string[] {
                        "Team Corners Under/Over"});
            table2.AddRow(new string[] {
                        "Team Corners Bands"});
            table2.AddRow(new string[] {
                        "Half Red Card"});
            table2.AddRow(new string[] {
                        "Half Penalty Awarded"});
            table2.AddRow(new string[] {
                        "Team Goals Under/Over"});
            table2.AddRow(new string[] {
                        "Second Half Result"});
            table2.AddRow(new string[] {
                        "Match Goal By Interval"});
            table2.AddRow(new string[] {
                        "Team Goal By Interval"});
            table2.AddRow(new string[] {
                        "Both Teams To Score In Half"});
            table2.AddRow(new string[] {
                        "Both Teams To Score In Both Halves"});
            table2.AddRow(new string[] {
                        "Match Winner And Over Under"});
            table2.AddRow(new string[] {
                        "Match Winning Margin"});
            table2.AddRow(new string[] {
                        "Win Either Half"});
            table2.AddRow(new string[] {
                        "Winner By Interval"});
            table2.AddRow(new string[] {
                        "Player To Score In Both Halves"});
            table2.AddRow(new string[] {
                        "Player To Score In First 10 Minutes"});
            table2.AddRow(new string[] {
                        "Player To Score And Match Result"});
            table2.AddRow(new string[] {
                        "Win Rest Of Match"});
            table2.AddRow(new string[] {
                        "Winning Margin 5-Way"});
#line 14
 testRunner.Then("the Market Definition that i have created should contain the following data", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extra time, no penalties")]
        public virtual void ExtraTimeNoPenalties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extra time, no penalties", ((string[])(null)));
#line 112
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table3.AddRow(new string[] {
                        "MatchLength",
                        "90"});
            table3.AddRow(new string[] {
                        "EtMatchLength",
                        "30"});
            table3.AddRow(new string[] {
                        "ExtratimeActive",
                        "true"});
            table3.AddRow(new string[] {
                        "PenaltiesActive",
                        "false"});
#line 113
 testRunner.Given("I have created a new Market Definition for \'Football\' with the following base var" +
                    "iables", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Display Name"});
            table4.AddRow(new string[] {
                        "Match Winner"});
            table4.AddRow(new string[] {
                        "Double Chance"});
            table4.AddRow(new string[] {
                        "Winning Margin"});
            table4.AddRow(new string[] {
                        "Score In Both Halves"});
            table4.AddRow(new string[] {
                        "Total Goals Over/Under"});
            table4.AddRow(new string[] {
                        "Total Goals 3-Way"});
            table4.AddRow(new string[] {
                        "Half Goals 3-Way"});
            table4.AddRow(new string[] {
                        "Asian Handicap"});
            table4.AddRow(new string[] {
                        "Handicap"});
            table4.AddRow(new string[] {
                        "Draw No Bet"});
            table4.AddRow(new string[] {
                        "Win To Nil"});
            table4.AddRow(new string[] {
                        "Full Time Correct Score"});
            table4.AddRow(new string[] {
                        "Full Time Correct Score Reduced"});
            table4.AddRow(new string[] {
                        "Goal Team"});
            table4.AddRow(new string[] {
                        "Clean Sheet"});
            table4.AddRow(new string[] {
                        "Both Teams To Score"});
            table4.AddRow(new string[] {
                        "Number Of Teams To Score"});
            table4.AddRow(new string[] {
                        "Team To Score"});
            table4.AddRow(new string[] {
                        "Which Teams To Score"});
            table4.AddRow(new string[] {
                        "Total Goals"});
            table4.AddRow(new string[] {
                        "Total Goals (Reduced)"});
            table4.AddRow(new string[] {
                        "Team Total Goals"});
            table4.AddRow(new string[] {
                        "Team Total Goals (Reduced)"});
            table4.AddRow(new string[] {
                        "Time Of First Goal"});
            table4.AddRow(new string[] {
                        "Time Of First Half Goal"});
            table4.AddRow(new string[] {
                        "Match Goal Time"});
            table4.AddRow(new string[] {
                        "Team Goal Time"});
            table4.AddRow(new string[] {
                        "Match Goal Time Over/Under/NoGoal"});
            table4.AddRow(new string[] {
                        "Team Goal Time Over/Under/NoGoal"});
            table4.AddRow(new string[] {
                        "1st Half Goals"});
            table4.AddRow(new string[] {
                        "Half With Most Goals"});
            table4.AddRow(new string[] {
                        "Double Result"});
            table4.AddRow(new string[] {
                        "Half Time Result"});
            table4.AddRow(new string[] {
                        "Half Time Correct Score"});
            table4.AddRow(new string[] {
                        "Goals Odd/Even"});
            table4.AddRow(new string[] {
                        "Match Goal Half"});
            table4.AddRow(new string[] {
                        "Team Goal Half"});
            table4.AddRow(new string[] {
                        "Corners Bands"});
            table4.AddRow(new string[] {
                        "Corners Over/Under"});
            table4.AddRow(new string[] {
                        "Corners Handicap 2-Way"});
            table4.AddRow(new string[] {
                        "Corners Match Bet"});
            table4.AddRow(new string[] {
                        "Corners Handicap 3-Way"});
            table4.AddRow(new string[] {
                        "Time Of First Corner"});
            table4.AddRow(new string[] {
                        "First Corner Team"});
            table4.AddRow(new string[] {
                        "Half Corners Exact Middle"});
            table4.AddRow(new string[] {
                        "Half Corners"});
            table4.AddRow(new string[] {
                        "First Corner Team By Half"});
            table4.AddRow(new string[] {
                        "Time Of First Team Corner"});
            table4.AddRow(new string[] {
                        "Corner Team"});
            table4.AddRow(new string[] {
                        "Booking Points 3-Way"});
            table4.AddRow(new string[] {
                        "Bookng Points 2-Way"});
            table4.AddRow(new string[] {
                        "Bookings Match Bet"});
            table4.AddRow(new string[] {
                        "First Carded Team"});
            table4.AddRow(new string[] {
                        "Match Red Card"});
            table4.AddRow(new string[] {
                        "Team Red Card"});
            table4.AddRow(new string[] {
                        "Card Team"});
            table4.AddRow(new string[] {
                        "Penalty Awarded"});
            table4.AddRow(new string[] {
                        "Penalty Scored"});
            table4.AddRow(new string[] {
                        "Match GoalScorer"});
            table4.AddRow(new string[] {
                        "Team GoalScorer"});
            table4.AddRow(new string[] {
                        "Last Match GoalScorer"});
            table4.AddRow(new string[] {
                        "Anytime - Yes/No"});
            table4.AddRow(new string[] {
                        "Brace - Yes/No"});
            table4.AddRow(new string[] {
                        "Hat-trick - Yes/No"});
            table4.AddRow(new string[] {
                        "GoalScorer Shirt Over/Under"});
            table4.AddRow(new string[] {
                        "Winner Of Tie"});
            table4.AddRow(new string[] {
                        "Winner and Match Portion"});
            table4.AddRow(new string[] {
                        "Double Chance"});
            table4.AddRow(new string[] {
                        "Anytime Goalscorer"});
            table4.AddRow(new string[] {
                        "Brace Goalscorer"});
            table4.AddRow(new string[] {
                        "Hat-trick Goalscorer"});
            table4.AddRow(new string[] {
                        "1st Half Goals - Under/Over"});
            table4.AddRow(new string[] {
                        "Win Both Halves"});
            table4.AddRow(new string[] {
                        "Team To Score Last Goal"});
            table4.AddRow(new string[] {
                        "Goal Is Own Goal"});
            table4.AddRow(new string[] {
                        "Last Goal Is Own Goal"});
            table4.AddRow(new string[] {
                        "Any Time Own Goal"});
            table4.AddRow(new string[] {
                        "Match Winner And Both Teams To Score"});
            table4.AddRow(new string[] {
                        "Team Corners Under/Over"});
            table4.AddRow(new string[] {
                        "Team Corners Bands"});
            table4.AddRow(new string[] {
                        "Half Red Card"});
            table4.AddRow(new string[] {
                        "Half Penalty Awarded"});
            table4.AddRow(new string[] {
                        "Team Goals Under/Over"});
            table4.AddRow(new string[] {
                        "Second Half Result"});
            table4.AddRow(new string[] {
                        "Match Goal By Interval"});
            table4.AddRow(new string[] {
                        "Team Goal By Interval"});
            table4.AddRow(new string[] {
                        "Both Teams To Score In Half"});
            table4.AddRow(new string[] {
                        "Both Teams To Score In Both Halves"});
            table4.AddRow(new string[] {
                        "Match Winner And Over Under"});
            table4.AddRow(new string[] {
                        "Match Winning Margin"});
            table4.AddRow(new string[] {
                        "Win Either Half"});
            table4.AddRow(new string[] {
                        "Winner By Interval"});
            table4.AddRow(new string[] {
                        "Player To Score In Both Halves"});
            table4.AddRow(new string[] {
                        "Player To Score In First 10 Minutes"});
            table4.AddRow(new string[] {
                        "Player To Score And Match Result"});
            table4.AddRow(new string[] {
                        "Extra Time Winner"});
            table4.AddRow(new string[] {
                        "Extra Time Total Goals Over/Under"});
            table4.AddRow(new string[] {
                        "Extra Time Total Goals"});
            table4.AddRow(new string[] {
                        "Extra Time Corners Over/Under"});
            table4.AddRow(new string[] {
                        "Extra Time Corners Exact Middle"});
            table4.AddRow(new string[] {
                        "Extra Time Booking Points 3-Way"});
            table4.AddRow(new string[] {
                        "Extra Time Goal Time"});
            table4.AddRow(new string[] {
                        "Extra Time Team Goal Time"});
            table4.AddRow(new string[] {
                        "Extra Time Team To Score"});
            table4.AddRow(new string[] {
                        "Extra Time Number Of Teams to Score"});
            table4.AddRow(new string[] {
                        "Extra Time Double Result"});
            table4.AddRow(new string[] {
                        "Extra Time Correct Score"});
            table4.AddRow(new string[] {
                        "Extra Time Red Card"});
            table4.AddRow(new string[] {
                        "Extra Time Half Time Result"});
            table4.AddRow(new string[] {
                        "Extra Time Half Time Correct Score"});
            table4.AddRow(new string[] {
                        "Extra Time First Half Goals Under/Over"});
            table4.AddRow(new string[] {
                        "Extra Time Goal Team"});
            table4.AddRow(new string[] {
                        "Extra Time Match Goal Scorer"});
            table4.AddRow(new string[] {
                        "Win Rest Of Match"});
            table4.AddRow(new string[] {
                        "Winning Margin 5-Way"});
#line 120
 testRunner.Then("the Market Definition that i have created should contain the following data", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extra time, penalties")]
        public virtual void ExtraTimePenalties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extra time, penalties", ((string[])(null)));
#line 238
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table5.AddRow(new string[] {
                        "MatchLength",
                        "90"});
            table5.AddRow(new string[] {
                        "EtMatchLength",
                        "30"});
            table5.AddRow(new string[] {
                        "ExtratimeActive",
                        "true"});
            table5.AddRow(new string[] {
                        "PenaltiesActive",
                        "true"});
#line 239
 testRunner.Given("I have created a new Market Definition for \'Football\' with the following base var" +
                    "iables", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Display Name"});
            table6.AddRow(new string[] {
                        "Match Winner"});
            table6.AddRow(new string[] {
                        "Double Chance"});
            table6.AddRow(new string[] {
                        "Winning Margin"});
            table6.AddRow(new string[] {
                        "Score In Both Halves"});
            table6.AddRow(new string[] {
                        "Total Goals Over/Under"});
            table6.AddRow(new string[] {
                        "Total Goals 3-Way"});
            table6.AddRow(new string[] {
                        "Half Goals 3-Way"});
            table6.AddRow(new string[] {
                        "Asian Handicap"});
            table6.AddRow(new string[] {
                        "Handicap"});
            table6.AddRow(new string[] {
                        "Draw No Bet"});
            table6.AddRow(new string[] {
                        "Win To Nil"});
            table6.AddRow(new string[] {
                        "Full Time Correct Score"});
            table6.AddRow(new string[] {
                        "Full Time Correct Score Reduced"});
            table6.AddRow(new string[] {
                        "Goal Team"});
            table6.AddRow(new string[] {
                        "Clean Sheet"});
            table6.AddRow(new string[] {
                        "Both Teams To Score"});
            table6.AddRow(new string[] {
                        "Number Of Teams To Score"});
            table6.AddRow(new string[] {
                        "Team To Score"});
            table6.AddRow(new string[] {
                        "Which Teams To Score"});
            table6.AddRow(new string[] {
                        "Total Goals"});
            table6.AddRow(new string[] {
                        "Total Goals (Reduced)"});
            table6.AddRow(new string[] {
                        "Team Total Goals"});
            table6.AddRow(new string[] {
                        "Team Total Goals (Reduced)"});
            table6.AddRow(new string[] {
                        "Time Of First Goal"});
            table6.AddRow(new string[] {
                        "Time Of First Half Goal"});
            table6.AddRow(new string[] {
                        "Match Goal Time"});
            table6.AddRow(new string[] {
                        "Team Goal Time"});
            table6.AddRow(new string[] {
                        "Match Goal Time Over/Under/NoGoal"});
            table6.AddRow(new string[] {
                        "Team Goal Time Over/Under/NoGoal"});
            table6.AddRow(new string[] {
                        "1st Half Goals"});
            table6.AddRow(new string[] {
                        "Half With Most Goals"});
            table6.AddRow(new string[] {
                        "Double Result"});
            table6.AddRow(new string[] {
                        "Half Time Result"});
            table6.AddRow(new string[] {
                        "Half Time Correct Score"});
            table6.AddRow(new string[] {
                        "Goals Odd/Even"});
            table6.AddRow(new string[] {
                        "Match Goal Half"});
            table6.AddRow(new string[] {
                        "Team Goal Half"});
            table6.AddRow(new string[] {
                        "Corners Bands"});
            table6.AddRow(new string[] {
                        "Corners Over/Under"});
            table6.AddRow(new string[] {
                        "Corners Handicap 2-Way"});
            table6.AddRow(new string[] {
                        "Corners Match Bet"});
            table6.AddRow(new string[] {
                        "Corners Handicap 3-Way"});
            table6.AddRow(new string[] {
                        "Time Of First Corner"});
            table6.AddRow(new string[] {
                        "First Corner Team"});
            table6.AddRow(new string[] {
                        "Half Corners Exact Middle"});
            table6.AddRow(new string[] {
                        "Half Corners"});
            table6.AddRow(new string[] {
                        "First Corner Team By Half"});
            table6.AddRow(new string[] {
                        "Time Of First Team Corner"});
            table6.AddRow(new string[] {
                        "Corner Team"});
            table6.AddRow(new string[] {
                        "Booking Points 3-Way"});
            table6.AddRow(new string[] {
                        "Bookng Points 2-Way"});
            table6.AddRow(new string[] {
                        "Bookings Match Bet"});
            table6.AddRow(new string[] {
                        "First Carded Team"});
            table6.AddRow(new string[] {
                        "Match Red Card"});
            table6.AddRow(new string[] {
                        "Team Red Card"});
            table6.AddRow(new string[] {
                        "Card Team"});
            table6.AddRow(new string[] {
                        "Penalty Awarded"});
            table6.AddRow(new string[] {
                        "Penalty Scored"});
            table6.AddRow(new string[] {
                        "Match GoalScorer"});
            table6.AddRow(new string[] {
                        "Team GoalScorer"});
            table6.AddRow(new string[] {
                        "Last Match GoalScorer"});
            table6.AddRow(new string[] {
                        "Anytime - Yes/No"});
            table6.AddRow(new string[] {
                        "Brace - Yes/No"});
            table6.AddRow(new string[] {
                        "Hat-trick - Yes/No"});
            table6.AddRow(new string[] {
                        "GoalScorer Shirt Over/Under"});
            table6.AddRow(new string[] {
                        "Winner Of Tie"});
            table6.AddRow(new string[] {
                        "Winner and Match Portion"});
            table6.AddRow(new string[] {
                        "Double Chance"});
            table6.AddRow(new string[] {
                        "Anytime Goalscorer"});
            table6.AddRow(new string[] {
                        "Brace Goalscorer"});
            table6.AddRow(new string[] {
                        "Hat-trick Goalscorer"});
            table6.AddRow(new string[] {
                        "1st Half Goals - Under/Over"});
            table6.AddRow(new string[] {
                        "Win Both Halves"});
            table6.AddRow(new string[] {
                        "Team To Score Last Goal"});
            table6.AddRow(new string[] {
                        "Goal Is Own Goal"});
            table6.AddRow(new string[] {
                        "Last Goal Is Own Goal"});
            table6.AddRow(new string[] {
                        "Any Time Own Goal"});
            table6.AddRow(new string[] {
                        "Match Winner And Both Teams To Score"});
            table6.AddRow(new string[] {
                        "Team Corners Under/Over"});
            table6.AddRow(new string[] {
                        "Team Corners Bands"});
            table6.AddRow(new string[] {
                        "Half Red Card"});
            table6.AddRow(new string[] {
                        "Half Penalty Awarded"});
            table6.AddRow(new string[] {
                        "Team Goals Under/Over"});
            table6.AddRow(new string[] {
                        "Second Half Result"});
            table6.AddRow(new string[] {
                        "Match Goal By Interval"});
            table6.AddRow(new string[] {
                        "Team Goal By Interval"});
            table6.AddRow(new string[] {
                        "Both Teams To Score In Half"});
            table6.AddRow(new string[] {
                        "Both Teams To Score In Both Halves"});
            table6.AddRow(new string[] {
                        "Match Winner And Over Under"});
            table6.AddRow(new string[] {
                        "Match Winning Margin"});
            table6.AddRow(new string[] {
                        "Win Either Half"});
            table6.AddRow(new string[] {
                        "Winner By Interval"});
            table6.AddRow(new string[] {
                        "Player To Score In Both Halves"});
            table6.AddRow(new string[] {
                        "Player To Score In First 10 Minutes"});
            table6.AddRow(new string[] {
                        "Player To Score And Match Result"});
            table6.AddRow(new string[] {
                        "Extra Time Winner"});
            table6.AddRow(new string[] {
                        "Extra Time Total Goals Over/Under"});
            table6.AddRow(new string[] {
                        "Extra Time Total Goals"});
            table6.AddRow(new string[] {
                        "Extra Time Corners Over/Under"});
            table6.AddRow(new string[] {
                        "Extra Time Corners Exact Middle"});
            table6.AddRow(new string[] {
                        "Extra Time Booking Points 3-Way"});
            table6.AddRow(new string[] {
                        "Extra Time Goal Time"});
            table6.AddRow(new string[] {
                        "Extra Time Team Goal Time"});
            table6.AddRow(new string[] {
                        "Extra Time Team To Score"});
            table6.AddRow(new string[] {
                        "Extra Time Number Of Teams to Score"});
            table6.AddRow(new string[] {
                        "Extra Time Double Result"});
            table6.AddRow(new string[] {
                        "Extra Time Correct Score"});
            table6.AddRow(new string[] {
                        "Extra Time Red Card"});
            table6.AddRow(new string[] {
                        "Extra Time Half Time Result"});
            table6.AddRow(new string[] {
                        "Extra Time Half Time Correct Score"});
            table6.AddRow(new string[] {
                        "Extra Time First Half Goals Under/Over"});
            table6.AddRow(new string[] {
                        "Extra Time Goal Team"});
            table6.AddRow(new string[] {
                        "Extra Time Match Goal Scorer"});
            table6.AddRow(new string[] {
                        "Penalty Shootout Winner"});
            table6.AddRow(new string[] {
                        "Total Penalties Taken"});
            table6.AddRow(new string[] {
                        "Total Penalties Scored"});
            table6.AddRow(new string[] {
                        "Penalties Until A Miss"});
            table6.AddRow(new string[] {
                        "Penalty Scored"});
            table6.AddRow(new string[] {
                        "Win Rest Of Match"});
            table6.AddRow(new string[] {
                        "Winning Margin 5-Way"});
#line 246
 testRunner.Then("the Market Definition that i have created should contain the following data", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
